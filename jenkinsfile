pipeline {
    agent any

    tools {
        maven 'M2_HOME'
    }

    stages {
        stage('Git Checkout') {
            steps {
                echo 'Pulling'
                git branch: 'AminaMAMI-4TWIN1-G3', url: 'https://github.com/soulaymaabdenbi/4TWIN01-G3-ProductFlow.git'
            }
        }

        stage('Check and Start MySQL') {
            steps {
                script {
                    def status = sh(script: 'sudo -S systemctl is-active mysql', returnStatus: true)
                    if (status != 0) {
                        sh 'sudo -S systemctl start mysql'
                        status = sh(script: 'sudo -S systemctl is-active mysql', returnStatus: true)
                        if (status != 0) {
                            error("Failed to start MySQL service.")
                        }
                    }
                }
            }
        }

        stage('Maven Clean Compile') {
            steps {
                dir('DevOps_Project') {
                    echo 'Running Maven Clean and Compile'
                    sh 'mvn clean compile'
                }
            }
        }
stage('Tests - JUnit/Mockito') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Build package') {
                    steps {
                        sh 'mvn package'
                    }
                }
        stage('Maven Install') {
            steps {
                dir('DevOps_Project') {
                    echo 'Running Maven Install'
                    sh 'mvn install'
                }
            }
        }

        stage('Rapport JaCoCo') {
            steps {
             dir('DevOps_Project'){
                   sh 'mvn test'
                   sh 'mvn jacoco:report'
             }

            }
        }

        stage('JaCoCo coverage report') {
                    steps {
                    dir('DevOps_Project'){
                        step([$class: 'JacocoPublisher',
                            execPattern: '**/target/jacoco.exec',
                            classPattern: '**/classes',
                            sourcePattern: '**/src',
                            exclusionPattern: '*/target/**/,**/*Test*,**/*_javassist/**'
                        ])
                    }
                }
}

/*
        stage("SonarQube") {
            steps {
                dir('DevOps_Project') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar'
                    }
                }
            }
        }
*/
        stage('Deploy to Nexus') {
            steps {
                dir('DevOps_Project') {
                    script {
                        sh 'mvn deploy '
                    }
                }
            }
        }

        stage('DOCKER IMAGE') {
            steps {
                dir('DevOps_Project') {
                    sh 'docker build -t aminamami-4twin1-g3-productflow:1.0.0 .'
                }
            }
        }

        stage('DOCKER HUB') {
            steps {
                sh 'docker login -u mamiamina -p 234JFT3231'
                sh 'docker tag aminamami-4twin1-g3-productflow:1.0.0 mamiamina/aminamami-4twin1-g3-productflow:1.0.0'
                sh 'docker push mamiamina/aminamami-4twin1-g3-productflow:1.0.0'
            }
        }

        stage('DOCKER COMPOSE FrontEnd BackEnd MySql') {
            steps {
                sh 'sudo systemctl stop mysql'
                sh 'docker-compose up -d'
            }
        }

        stage('Grafana/Prometheus') {
            steps {
                script {
                    sh 'docker start 7532812ec873'
                    sh 'docker start ca57c635e570'
                }
            }
        }

        stage('Email Notification') {
            steps {
                mail(
                    to: 'amina.mami@esprit.tn', // Recipient email address
                    subject: "Pipeline Status - ${currentBuild.currentResult}", // Subject of the email
                    body: "The pipeline has ${currentBuild.currentResult}.\n\nBuild number: ${env.BUILD_NUMBER}\nBuild URL: ${env.BUILD_URL}" // Body of the email
                )
            }
        }
    }

    post {
        success {
            mail to: 'amina.mami@esprit.tn',
                 subject: "SUCCESS: Jenkins Pipeline Build - ${env.BUILD_NUMBER}",
                 body: "The Pipeline has successfully completed. Build number: ${env.BUILD_NUMBER}"
        }
        failure {
            mail to: 'amina.mami@esprit.tn',
                 subject: "FAILED: Jenkins Pipeline Build - ${env.BUILD_NUMBER}",
                 body: "The Pipeline has failed. Build number: ${env.BUILD_NUMBER}. Check the console output at ${env.BUILD_URL} to see the error details."
        }
        unstable {
            mail to: 'amina.mami@esprit.tn',
                 subject: "UNSTABLE: Jenkins Pipeline Build - ${env.BUILD_NUMBER}",
                 body: "The build is unstable. Some tests might have failed. Build number: ${env.BUILD_NUMBER}."
        }
    }
}
